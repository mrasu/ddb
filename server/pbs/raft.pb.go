// Code generated by protoc-gen-go. DO NOT EDIT.
// source: raft.proto

/*
Package pbs is a generated protocol buffer package.

It is generated from these files:
	raft.proto

It has these top-level messages:
	ChangeSet
	CreateDBChangeSet
	CreateTableChangeSet
	RowMeta
	InsertChangeSets
	InsertRow
	UpdateChangeSets
	UpdateRow
	BeginChangeSet
	CommitChangeSet
	RollbackChangeSet
	AbortChangeSet
*/
package pbs

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

// Must be same with the types.ColumnType
type ColumnType int32

const (
	ColumnType_Int              ColumnType = 0
	ColumnType_AutoIncrementInt ColumnType = 1
	ColumnType_VarChar          ColumnType = 10
)

var ColumnType_name = map[int32]string{
	0:  "Int",
	1:  "AutoIncrementInt",
	10: "VarChar",
}
var ColumnType_value = map[string]int32{
	"Int":              0,
	"AutoIncrementInt": 1,
	"VarChar":          10,
}

func (x ColumnType) String() string {
	return proto.EnumName(ColumnType_name, int32(x))
}
func (ColumnType) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

type ChangeSet struct {
	Lsn int64 `protobuf:"varint,1,opt,name=Lsn,json=lsn" json:"Lsn,omitempty"`
	// Types that are valid to be assigned to Data:
	//	*ChangeSet_CreateDB
	//	*ChangeSet_CreateTable
	//	*ChangeSet_InsertSets
	//	*ChangeSet_UpdateSets
	//	*ChangeSet_Begin
	//	*ChangeSet_Commit
	//	*ChangeSet_Rollback
	//	*ChangeSet_Abort
	Data isChangeSet_Data `protobuf_oneof:"Data"`
}

func (m *ChangeSet) Reset()                    { *m = ChangeSet{} }
func (m *ChangeSet) String() string            { return proto.CompactTextString(m) }
func (*ChangeSet) ProtoMessage()               {}
func (*ChangeSet) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

type isChangeSet_Data interface {
	isChangeSet_Data()
}

type ChangeSet_CreateDB struct {
	CreateDB *CreateDBChangeSet `protobuf:"bytes,11,opt,name=CreateDB,json=createDB,oneof"`
}
type ChangeSet_CreateTable struct {
	CreateTable *CreateTableChangeSet `protobuf:"bytes,100,opt,name=CreateTable,json=createTable,oneof"`
}
type ChangeSet_InsertSets struct {
	InsertSets *InsertChangeSets `protobuf:"bytes,200,opt,name=InsertSets,json=insertSets,oneof"`
}
type ChangeSet_UpdateSets struct {
	UpdateSets *UpdateChangeSets `protobuf:"bytes,210,opt,name=UpdateSets,json=updateSets,oneof"`
}
type ChangeSet_Begin struct {
	Begin *BeginChangeSet `protobuf:"bytes,900,opt,name=Begin,json=begin,oneof"`
}
type ChangeSet_Commit struct {
	Commit *CommitChangeSet `protobuf:"bytes,910,opt,name=Commit,json=commit,oneof"`
}
type ChangeSet_Rollback struct {
	Rollback *RollbackChangeSet `protobuf:"bytes,920,opt,name=Rollback,json=rollback,oneof"`
}
type ChangeSet_Abort struct {
	Abort *AbortChangeSet `protobuf:"bytes,930,opt,name=Abort,json=abort,oneof"`
}

func (*ChangeSet_CreateDB) isChangeSet_Data()    {}
func (*ChangeSet_CreateTable) isChangeSet_Data() {}
func (*ChangeSet_InsertSets) isChangeSet_Data()  {}
func (*ChangeSet_UpdateSets) isChangeSet_Data()  {}
func (*ChangeSet_Begin) isChangeSet_Data()       {}
func (*ChangeSet_Commit) isChangeSet_Data()      {}
func (*ChangeSet_Rollback) isChangeSet_Data()    {}
func (*ChangeSet_Abort) isChangeSet_Data()       {}

func (m *ChangeSet) GetData() isChangeSet_Data {
	if m != nil {
		return m.Data
	}
	return nil
}

func (m *ChangeSet) GetLsn() int64 {
	if m != nil {
		return m.Lsn
	}
	return 0
}

func (m *ChangeSet) GetCreateDB() *CreateDBChangeSet {
	if x, ok := m.GetData().(*ChangeSet_CreateDB); ok {
		return x.CreateDB
	}
	return nil
}

func (m *ChangeSet) GetCreateTable() *CreateTableChangeSet {
	if x, ok := m.GetData().(*ChangeSet_CreateTable); ok {
		return x.CreateTable
	}
	return nil
}

func (m *ChangeSet) GetInsertSets() *InsertChangeSets {
	if x, ok := m.GetData().(*ChangeSet_InsertSets); ok {
		return x.InsertSets
	}
	return nil
}

func (m *ChangeSet) GetUpdateSets() *UpdateChangeSets {
	if x, ok := m.GetData().(*ChangeSet_UpdateSets); ok {
		return x.UpdateSets
	}
	return nil
}

func (m *ChangeSet) GetBegin() *BeginChangeSet {
	if x, ok := m.GetData().(*ChangeSet_Begin); ok {
		return x.Begin
	}
	return nil
}

func (m *ChangeSet) GetCommit() *CommitChangeSet {
	if x, ok := m.GetData().(*ChangeSet_Commit); ok {
		return x.Commit
	}
	return nil
}

func (m *ChangeSet) GetRollback() *RollbackChangeSet {
	if x, ok := m.GetData().(*ChangeSet_Rollback); ok {
		return x.Rollback
	}
	return nil
}

func (m *ChangeSet) GetAbort() *AbortChangeSet {
	if x, ok := m.GetData().(*ChangeSet_Abort); ok {
		return x.Abort
	}
	return nil
}

// XXX_OneofFuncs is for the internal use of the proto package.
func (*ChangeSet) XXX_OneofFuncs() (func(msg proto.Message, b *proto.Buffer) error, func(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error), func(msg proto.Message) (n int), []interface{}) {
	return _ChangeSet_OneofMarshaler, _ChangeSet_OneofUnmarshaler, _ChangeSet_OneofSizer, []interface{}{
		(*ChangeSet_CreateDB)(nil),
		(*ChangeSet_CreateTable)(nil),
		(*ChangeSet_InsertSets)(nil),
		(*ChangeSet_UpdateSets)(nil),
		(*ChangeSet_Begin)(nil),
		(*ChangeSet_Commit)(nil),
		(*ChangeSet_Rollback)(nil),
		(*ChangeSet_Abort)(nil),
	}
}

func _ChangeSet_OneofMarshaler(msg proto.Message, b *proto.Buffer) error {
	m := msg.(*ChangeSet)
	// Data
	switch x := m.Data.(type) {
	case *ChangeSet_CreateDB:
		b.EncodeVarint(11<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.CreateDB); err != nil {
			return err
		}
	case *ChangeSet_CreateTable:
		b.EncodeVarint(100<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.CreateTable); err != nil {
			return err
		}
	case *ChangeSet_InsertSets:
		b.EncodeVarint(200<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.InsertSets); err != nil {
			return err
		}
	case *ChangeSet_UpdateSets:
		b.EncodeVarint(210<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.UpdateSets); err != nil {
			return err
		}
	case *ChangeSet_Begin:
		b.EncodeVarint(900<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Begin); err != nil {
			return err
		}
	case *ChangeSet_Commit:
		b.EncodeVarint(910<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Commit); err != nil {
			return err
		}
	case *ChangeSet_Rollback:
		b.EncodeVarint(920<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Rollback); err != nil {
			return err
		}
	case *ChangeSet_Abort:
		b.EncodeVarint(930<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Abort); err != nil {
			return err
		}
	case nil:
	default:
		return fmt.Errorf("ChangeSet.Data has unexpected type %T", x)
	}
	return nil
}

func _ChangeSet_OneofUnmarshaler(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error) {
	m := msg.(*ChangeSet)
	switch tag {
	case 11: // Data.CreateDB
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(CreateDBChangeSet)
		err := b.DecodeMessage(msg)
		m.Data = &ChangeSet_CreateDB{msg}
		return true, err
	case 100: // Data.CreateTable
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(CreateTableChangeSet)
		err := b.DecodeMessage(msg)
		m.Data = &ChangeSet_CreateTable{msg}
		return true, err
	case 200: // Data.InsertSets
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(InsertChangeSets)
		err := b.DecodeMessage(msg)
		m.Data = &ChangeSet_InsertSets{msg}
		return true, err
	case 210: // Data.UpdateSets
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(UpdateChangeSets)
		err := b.DecodeMessage(msg)
		m.Data = &ChangeSet_UpdateSets{msg}
		return true, err
	case 900: // Data.Begin
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(BeginChangeSet)
		err := b.DecodeMessage(msg)
		m.Data = &ChangeSet_Begin{msg}
		return true, err
	case 910: // Data.Commit
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(CommitChangeSet)
		err := b.DecodeMessage(msg)
		m.Data = &ChangeSet_Commit{msg}
		return true, err
	case 920: // Data.Rollback
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(RollbackChangeSet)
		err := b.DecodeMessage(msg)
		m.Data = &ChangeSet_Rollback{msg}
		return true, err
	case 930: // Data.Abort
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(AbortChangeSet)
		err := b.DecodeMessage(msg)
		m.Data = &ChangeSet_Abort{msg}
		return true, err
	default:
		return false, nil
	}
}

func _ChangeSet_OneofSizer(msg proto.Message) (n int) {
	m := msg.(*ChangeSet)
	// Data
	switch x := m.Data.(type) {
	case *ChangeSet_CreateDB:
		s := proto.Size(x.CreateDB)
		n += proto.SizeVarint(11<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *ChangeSet_CreateTable:
		s := proto.Size(x.CreateTable)
		n += proto.SizeVarint(100<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *ChangeSet_InsertSets:
		s := proto.Size(x.InsertSets)
		n += proto.SizeVarint(200<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *ChangeSet_UpdateSets:
		s := proto.Size(x.UpdateSets)
		n += proto.SizeVarint(210<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *ChangeSet_Begin:
		s := proto.Size(x.Begin)
		n += proto.SizeVarint(900<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *ChangeSet_Commit:
		s := proto.Size(x.Commit)
		n += proto.SizeVarint(910<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *ChangeSet_Rollback:
		s := proto.Size(x.Rollback)
		n += proto.SizeVarint(920<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *ChangeSet_Abort:
		s := proto.Size(x.Abort)
		n += proto.SizeVarint(930<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case nil:
	default:
		panic(fmt.Sprintf("proto: unexpected type %T in oneof", x))
	}
	return n
}

type CreateDBChangeSet struct {
	Name string `protobuf:"bytes,1,opt,name=Name,json=name" json:"Name,omitempty"`
}

func (m *CreateDBChangeSet) Reset()                    { *m = CreateDBChangeSet{} }
func (m *CreateDBChangeSet) String() string            { return proto.CompactTextString(m) }
func (*CreateDBChangeSet) ProtoMessage()               {}
func (*CreateDBChangeSet) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *CreateDBChangeSet) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

type CreateTableChangeSet struct {
	DBName   string     `protobuf:"bytes,1,opt,name=DBName,json=dBName" json:"DBName,omitempty"`
	Name     string     `protobuf:"bytes,2,opt,name=Name,json=name" json:"Name,omitempty"`
	RowMetas []*RowMeta `protobuf:"bytes,3,rep,name=RowMetas,json=rowMetas" json:"RowMetas,omitempty"`
}

func (m *CreateTableChangeSet) Reset()                    { *m = CreateTableChangeSet{} }
func (m *CreateTableChangeSet) String() string            { return proto.CompactTextString(m) }
func (*CreateTableChangeSet) ProtoMessage()               {}
func (*CreateTableChangeSet) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *CreateTableChangeSet) GetDBName() string {
	if m != nil {
		return m.DBName
	}
	return ""
}

func (m *CreateTableChangeSet) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *CreateTableChangeSet) GetRowMetas() []*RowMeta {
	if m != nil {
		return m.RowMetas
	}
	return nil
}

type RowMeta struct {
	Name       string     `protobuf:"bytes,1,opt,name=Name,json=name" json:"Name,omitempty"`
	ColumnType ColumnType `protobuf:"varint,2,opt,name=ColumnType,json=columnType,enum=pbs.ColumnType" json:"ColumnType,omitempty"`
	Length     int64      `protobuf:"varint,3,opt,name=Length,json=length" json:"Length,omitempty"`
	AllowsNull bool       `protobuf:"varint,4,opt,name=AllowsNull,json=allowsNull" json:"AllowsNull,omitempty"`
}

func (m *RowMeta) Reset()                    { *m = RowMeta{} }
func (m *RowMeta) String() string            { return proto.CompactTextString(m) }
func (*RowMeta) ProtoMessage()               {}
func (*RowMeta) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

func (m *RowMeta) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *RowMeta) GetColumnType() ColumnType {
	if m != nil {
		return m.ColumnType
	}
	return ColumnType_Int
}

func (m *RowMeta) GetLength() int64 {
	if m != nil {
		return m.Length
	}
	return 0
}

func (m *RowMeta) GetAllowsNull() bool {
	if m != nil {
		return m.AllowsNull
	}
	return false
}

type InsertChangeSets struct {
	DBName            string       `protobuf:"bytes,1,opt,name=DBName,json=dBName" json:"DBName,omitempty"`
	TableName         string       `protobuf:"bytes,2,opt,name=TableName,json=tableName" json:"TableName,omitempty"`
	Rows              []*InsertRow `protobuf:"bytes,3,rep,name=Rows,json=rows" json:"Rows,omitempty"`
	TransactionNumber int64        `protobuf:"varint,4,opt,name=TransactionNumber,json=transactionNumber" json:"TransactionNumber,omitempty"`
}

func (m *InsertChangeSets) Reset()                    { *m = InsertChangeSets{} }
func (m *InsertChangeSets) String() string            { return proto.CompactTextString(m) }
func (*InsertChangeSets) ProtoMessage()               {}
func (*InsertChangeSets) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{4} }

func (m *InsertChangeSets) GetDBName() string {
	if m != nil {
		return m.DBName
	}
	return ""
}

func (m *InsertChangeSets) GetTableName() string {
	if m != nil {
		return m.TableName
	}
	return ""
}

func (m *InsertChangeSets) GetRows() []*InsertRow {
	if m != nil {
		return m.Rows
	}
	return nil
}

func (m *InsertChangeSets) GetTransactionNumber() int64 {
	if m != nil {
		return m.TransactionNumber
	}
	return 0
}

type InsertRow struct {
	Columns map[string]string `protobuf:"bytes,1,rep,name=Columns,json=columns" json:"Columns,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
}

func (m *InsertRow) Reset()                    { *m = InsertRow{} }
func (m *InsertRow) String() string            { return proto.CompactTextString(m) }
func (*InsertRow) ProtoMessage()               {}
func (*InsertRow) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{5} }

func (m *InsertRow) GetColumns() map[string]string {
	if m != nil {
		return m.Columns
	}
	return nil
}

type UpdateChangeSets struct {
	DBName            string       `protobuf:"bytes,1,opt,name=DBName,json=dBName" json:"DBName,omitempty"`
	TableName         string       `protobuf:"bytes,2,opt,name=TableName,json=tableName" json:"TableName,omitempty"`
	Rows              []*UpdateRow `protobuf:"bytes,3,rep,name=Rows,json=rows" json:"Rows,omitempty"`
	TransactionNumber int64        `protobuf:"varint,4,opt,name=TransactionNumber,json=transactionNumber" json:"TransactionNumber,omitempty"`
}

func (m *UpdateChangeSets) Reset()                    { *m = UpdateChangeSets{} }
func (m *UpdateChangeSets) String() string            { return proto.CompactTextString(m) }
func (*UpdateChangeSets) ProtoMessage()               {}
func (*UpdateChangeSets) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{6} }

func (m *UpdateChangeSets) GetDBName() string {
	if m != nil {
		return m.DBName
	}
	return ""
}

func (m *UpdateChangeSets) GetTableName() string {
	if m != nil {
		return m.TableName
	}
	return ""
}

func (m *UpdateChangeSets) GetRows() []*UpdateRow {
	if m != nil {
		return m.Rows
	}
	return nil
}

func (m *UpdateChangeSets) GetTransactionNumber() int64 {
	if m != nil {
		return m.TransactionNumber
	}
	return 0
}

type UpdateRow struct {
	PrimaryKeyId int64             `protobuf:"varint,1,opt,name=PrimaryKeyId,json=primaryKeyId" json:"PrimaryKeyId,omitempty"`
	Columns      map[string]string `protobuf:"bytes,2,rep,name=Columns,json=columns" json:"Columns,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
}

func (m *UpdateRow) Reset()                    { *m = UpdateRow{} }
func (m *UpdateRow) String() string            { return proto.CompactTextString(m) }
func (*UpdateRow) ProtoMessage()               {}
func (*UpdateRow) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{7} }

func (m *UpdateRow) GetPrimaryKeyId() int64 {
	if m != nil {
		return m.PrimaryKeyId
	}
	return 0
}

func (m *UpdateRow) GetColumns() map[string]string {
	if m != nil {
		return m.Columns
	}
	return nil
}

type BeginChangeSet struct {
	Number int64 `protobuf:"varint,1,opt,name=Number,json=number" json:"Number,omitempty"`
}

func (m *BeginChangeSet) Reset()                    { *m = BeginChangeSet{} }
func (m *BeginChangeSet) String() string            { return proto.CompactTextString(m) }
func (*BeginChangeSet) ProtoMessage()               {}
func (*BeginChangeSet) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{8} }

func (m *BeginChangeSet) GetNumber() int64 {
	if m != nil {
		return m.Number
	}
	return 0
}

type CommitChangeSet struct {
	Number int64 `protobuf:"varint,1,opt,name=Number,json=number" json:"Number,omitempty"`
}

func (m *CommitChangeSet) Reset()                    { *m = CommitChangeSet{} }
func (m *CommitChangeSet) String() string            { return proto.CompactTextString(m) }
func (*CommitChangeSet) ProtoMessage()               {}
func (*CommitChangeSet) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{9} }

func (m *CommitChangeSet) GetNumber() int64 {
	if m != nil {
		return m.Number
	}
	return 0
}

type RollbackChangeSet struct {
	Number int64 `protobuf:"varint,1,opt,name=Number,json=number" json:"Number,omitempty"`
}

func (m *RollbackChangeSet) Reset()                    { *m = RollbackChangeSet{} }
func (m *RollbackChangeSet) String() string            { return proto.CompactTextString(m) }
func (*RollbackChangeSet) ProtoMessage()               {}
func (*RollbackChangeSet) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{10} }

func (m *RollbackChangeSet) GetNumber() int64 {
	if m != nil {
		return m.Number
	}
	return 0
}

type AbortChangeSet struct {
	Number int64 `protobuf:"varint,1,opt,name=Number,json=number" json:"Number,omitempty"`
}

func (m *AbortChangeSet) Reset()                    { *m = AbortChangeSet{} }
func (m *AbortChangeSet) String() string            { return proto.CompactTextString(m) }
func (*AbortChangeSet) ProtoMessage()               {}
func (*AbortChangeSet) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{11} }

func (m *AbortChangeSet) GetNumber() int64 {
	if m != nil {
		return m.Number
	}
	return 0
}

func init() {
	proto.RegisterType((*ChangeSet)(nil), "pbs.ChangeSet")
	proto.RegisterType((*CreateDBChangeSet)(nil), "pbs.CreateDBChangeSet")
	proto.RegisterType((*CreateTableChangeSet)(nil), "pbs.CreateTableChangeSet")
	proto.RegisterType((*RowMeta)(nil), "pbs.RowMeta")
	proto.RegisterType((*InsertChangeSets)(nil), "pbs.InsertChangeSets")
	proto.RegisterType((*InsertRow)(nil), "pbs.InsertRow")
	proto.RegisterType((*UpdateChangeSets)(nil), "pbs.UpdateChangeSets")
	proto.RegisterType((*UpdateRow)(nil), "pbs.UpdateRow")
	proto.RegisterType((*BeginChangeSet)(nil), "pbs.BeginChangeSet")
	proto.RegisterType((*CommitChangeSet)(nil), "pbs.CommitChangeSet")
	proto.RegisterType((*RollbackChangeSet)(nil), "pbs.RollbackChangeSet")
	proto.RegisterType((*AbortChangeSet)(nil), "pbs.AbortChangeSet")
	proto.RegisterEnum("pbs.ColumnType", ColumnType_name, ColumnType_value)
}

func init() { proto.RegisterFile("raft.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 663 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xb4, 0x95, 0x4f, 0x6f, 0xd3, 0x30,
	0x18, 0xc6, 0x97, 0xa5, 0x4b, 0xda, 0xb7, 0x55, 0xd7, 0x9a, 0x32, 0x99, 0x3f, 0x42, 0x55, 0x2e,
	0x84, 0x3f, 0xda, 0xa4, 0xc1, 0xa4, 0x69, 0x12, 0x87, 0xb5, 0x43, 0x5a, 0xc5, 0x98, 0x50, 0x36,
	0xb8, 0x3b, 0xa9, 0x59, 0xab, 0x25, 0x4e, 0x65, 0xbb, 0x54, 0xbd, 0x70, 0x42, 0x1c, 0x39, 0x23,
	0x8e, 0xfb, 0x34, 0x9c, 0xf7, 0x89, 0x50, 0xec, 0x34, 0x73, 0xba, 0xf5, 0x82, 0xe0, 0xd6, 0xfc,
	0xfc, 0x3e, 0x6f, 0xde, 0xe7, 0x89, 0xed, 0x02, 0x70, 0xf2, 0x59, 0x6e, 0x4f, 0x78, 0x2a, 0x53,
	0x64, 0x4f, 0x42, 0xe1, 0x5d, 0xdb, 0x50, 0xeb, 0x8f, 0x08, 0xbb, 0xa0, 0x67, 0x54, 0xa2, 0x16,
	0xd8, 0x27, 0x82, 0x61, 0xab, 0x6b, 0xf9, 0x76, 0x60, 0xc7, 0x82, 0xa1, 0xd7, 0x50, 0xed, 0x73,
	0x4a, 0x24, 0x3d, 0xea, 0xe1, 0x7a, 0xd7, 0xf2, 0xeb, 0xbb, 0x5b, 0xdb, 0x93, 0x50, 0x6c, 0x2f,
	0x60, 0xa1, 0x3d, 0x5e, 0x0b, 0xaa, 0x51, 0x0e, 0xd1, 0x1b, 0xa8, 0xeb, 0x82, 0x73, 0x12, 0xc6,
	0x14, 0x0f, 0x95, 0xf0, 0x81, 0x21, 0x54, 0xdc, 0xd4, 0xd6, 0xa3, 0x1b, 0x8e, 0xf6, 0x01, 0x06,
	0x4c, 0x50, 0x2e, 0xcf, 0xa8, 0x14, 0xf8, 0xb7, 0xa5, 0xe4, 0xf7, 0x95, 0x5c, 0xf3, 0x42, 0x29,
	0x8e, 0xd7, 0x02, 0x18, 0x17, 0xb5, 0x99, 0xf2, 0xe3, 0x64, 0x48, 0xa4, 0x5a, 0xc3, 0xd7, 0xa6,
	0x52, 0xf3, 0xb2, 0x72, 0x5a, 0xd4, 0xa2, 0x97, 0xb0, 0xd1, 0xa3, 0x17, 0x63, 0x86, 0xbf, 0xb9,
	0x4a, 0x74, 0x4f, 0x89, 0x14, 0x32, 0xe7, 0xdc, 0x08, 0x33, 0x82, 0x76, 0xc0, 0xe9, 0xa7, 0x49,
	0x32, 0x96, 0xf8, 0x87, 0x2e, 0xef, 0x68, 0x73, 0x8a, 0x99, 0xf5, 0x4e, 0xa4, 0x10, 0xda, 0x83,
	0x6a, 0x90, 0xc6, 0x71, 0x48, 0xa2, 0x4b, 0xfc, 0xd3, 0x35, 0x82, 0x5c, 0xd0, 0x52, 0x90, 0x3c,
	0x87, 0xd9, 0x54, 0x87, 0x61, 0xca, 0x25, 0xbe, 0x32, 0xa7, 0x52, 0xa8, 0x34, 0x15, 0xc9, 0x48,
	0xcf, 0x81, 0xca, 0x11, 0x91, 0xc4, 0x7b, 0x0a, 0xed, 0x5b, 0xdf, 0x07, 0x21, 0xa8, 0x9c, 0x92,
	0x84, 0xaa, 0x8f, 0x5b, 0x0b, 0x2a, 0x8c, 0x24, 0xd4, 0x8b, 0xa1, 0x73, 0xd7, 0xf7, 0x40, 0x5b,
	0xe0, 0x1c, 0xf5, 0x8c, 0x6a, 0x67, 0xa8, 0x9e, 0x8a, 0x1e, 0xeb, 0x37, 0x3d, 0x90, 0x9f, 0x39,
	0x9b, 0xbd, 0xa7, 0x92, 0x08, 0x6c, 0x77, 0x6d, 0xbf, 0xbe, 0xdb, 0xc8, 0x8d, 0x29, 0x98, 0x99,
	0xd1, 0xab, 0xde, 0x77, 0x0b, 0xdc, 0x9c, 0xde, 0x35, 0x0d, 0xda, 0x01, 0xe8, 0xa7, 0xf1, 0x34,
	0x61, 0xe7, 0xf3, 0x89, 0x7e, 0x47, 0x73, 0x77, 0x33, 0xcf, 0x75, 0x81, 0x03, 0x88, 0x8a, 0xdf,
	0xd9, 0x98, 0x27, 0x94, 0x5d, 0xc8, 0x11, 0xb6, 0xd5, 0x8e, 0x75, 0x62, 0xf5, 0x84, 0x9e, 0x00,
	0x1c, 0xc6, 0x71, 0x3a, 0x13, 0xa7, 0xd3, 0x38, 0xc6, 0x95, 0xae, 0xe5, 0x57, 0x03, 0x20, 0x05,
	0xf1, 0x7e, 0x59, 0xd0, 0x5a, 0xde, 0x48, 0x2b, 0x3d, 0x3f, 0x86, 0x9a, 0x4a, 0xc7, 0x30, 0x5e,
	0x93, 0x0b, 0x80, 0x3c, 0xa8, 0x04, 0xe9, 0x6c, 0xe1, 0xbc, 0x69, 0xec, 0xd1, 0x20, 0x9d, 0x05,
	0x15, 0x9e, 0xce, 0xb2, 0xad, 0xd5, 0x3e, 0xe7, 0x84, 0x09, 0x12, 0xc9, 0x71, 0xca, 0x4e, 0xa7,
	0x49, 0x48, 0xb9, 0x9a, 0xca, 0x0e, 0xda, 0x72, 0x79, 0xc1, 0xfb, 0x0a, 0xb5, 0xa2, 0x01, 0xda,
	0x03, 0x57, 0x7b, 0x17, 0xd8, 0x52, 0x6f, 0x78, 0x54, 0x7e, 0x43, 0x9e, 0x8c, 0x78, 0xcb, 0x24,
	0x9f, 0x07, 0xae, 0xce, 0x46, 0x3c, 0x3c, 0x80, 0x86, 0xb9, 0x90, 0x9d, 0xeb, 0x4b, 0x3a, 0xcf,
	0x8d, 0x65, 0x3f, 0x51, 0x07, 0x36, 0xbe, 0x90, 0x78, 0xba, 0x70, 0xa4, 0x1f, 0x0e, 0xd6, 0xf7,
	0x2d, 0x15, 0xce, 0xf2, 0x59, 0xf9, 0x87, 0xe1, 0xe8, 0xd6, 0x7f, 0x1b, 0xce, 0x95, 0x05, 0xb5,
	0xa2, 0x03, 0xf2, 0xa0, 0xf1, 0x81, 0x8f, 0x13, 0xc2, 0xe7, 0xef, 0xe8, 0x7c, 0x30, 0xcc, 0xef,
	0xad, 0xc6, 0xc4, 0x60, 0x66, 0x82, 0xeb, 0x46, 0x82, 0x45, 0x93, 0xff, 0x90, 0xa0, 0x0f, 0xcd,
	0xf2, 0xbd, 0x91, 0xc5, 0x97, 0x3b, 0xd3, 0x23, 0x3a, 0x4c, 0xdb, 0x79, 0x06, 0x9b, 0x4b, 0x57,
	0xc6, 0xca, 0xd2, 0x17, 0xd0, 0xbe, 0x75, 0x55, 0xac, 0x2c, 0xf6, 0xa1, 0x59, 0xbe, 0x23, 0x56,
	0x55, 0x3e, 0xdf, 0x37, 0xcf, 0x1c, 0x72, 0xc1, 0x1e, 0x30, 0xd9, 0x5a, 0x43, 0x1d, 0x68, 0x1d,
	0x4e, 0x65, 0x3a, 0x60, 0x11, 0xa7, 0x09, 0x65, 0x32, 0xa3, 0x16, 0xaa, 0x83, 0xfb, 0x89, 0xf0,
	0xfe, 0x88, 0xf0, 0x16, 0x84, 0x8e, 0xfa, 0x17, 0x79, 0xf5, 0x27, 0x00, 0x00, 0xff, 0xff, 0xc3,
	0x33, 0xb7, 0xc6, 0x53, 0x06, 0x00, 0x00,
}
